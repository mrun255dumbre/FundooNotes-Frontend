[{"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\index.js":"1","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\reportWebVitals.js":"2","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\user-service.js":"3","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\axios-service.js":"4","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\config\\config.js":"5","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\index.jsx":"6","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\ThemeWrapper.jsx":"7","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\NotFound.jsx":"8","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\index.jsx":"9","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ContextWrapper.jsx":"10","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\AppContext.js":"11","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ProtectedRoute.jsx":"12","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\forgot-password.jsx":"13","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\reset-password.jsx":"14","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\registration.jsx":"15","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\login.jsx":"16","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\menu.js":"17","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\AddNote.jsx":"18","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\note-service.js":"19","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\components\\NoteComponent.jsx":"20","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Note.jsx":"21","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Archived.jsx":"22","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Trash.jsx":"23","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\constants.js":"24"},{"size":150,"mtime":1610606564306,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":699,"mtime":1610471825032,"results":"28","hashOfConfig":"26"},{"size":1483,"mtime":1610798231993,"results":"29","hashOfConfig":"26"},{"size":60,"mtime":1609809958430,"results":"30","hashOfConfig":"26"},{"size":1424,"mtime":1610794816675,"results":"31","hashOfConfig":"26"},{"size":7578,"mtime":1610806603443,"results":"32","hashOfConfig":"26"},{"size":698,"mtime":1610616700766,"results":"33","hashOfConfig":"26"},{"size":679,"mtime":1610794785559,"results":"34","hashOfConfig":"26"},{"size":1089,"mtime":1610806832737,"results":"35","hashOfConfig":"26"},{"size":80,"mtime":1610607496005,"results":"36","hashOfConfig":"26"},{"size":456,"mtime":1610617872754,"results":"37","hashOfConfig":"26"},{"size":2063,"mtime":1610607944099,"results":"38","hashOfConfig":"26"},{"size":4108,"mtime":1610618098905,"results":"39","hashOfConfig":"26"},{"size":6071,"mtime":1610618026374,"results":"40","hashOfConfig":"26"},{"size":2987,"mtime":1610785081189,"results":"41","hashOfConfig":"26"},{"size":688,"mtime":1610794479039,"results":"42","hashOfConfig":"26"},{"size":5532,"mtime":1610800301844,"results":"43","hashOfConfig":"26"},{"size":1094,"mtime":1610802203652,"results":"44","hashOfConfig":"26"},{"size":8687,"mtime":1610803656715,"results":"45","hashOfConfig":"26"},{"size":3305,"mtime":1610805958955,"results":"46","hashOfConfig":"26"},{"size":1284,"mtime":1610796821335,"results":"47","hashOfConfig":"26"},{"size":1276,"mtime":1610797014617,"results":"48","hashOfConfig":"26"},{"size":66,"mtime":1610805385322,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"ys41j5",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\index.js",[],["110","111"],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\reportWebVitals.js",[],["112","113"],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\user-service.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\axios-service.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\config\\config.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\index.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\ThemeWrapper.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\NotFound.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\index.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ContextWrapper.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\AppContext.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ProtectedRoute.jsx",["114","115"],"import React, { useContext, useEffect } from 'react';\r\nimport { Redirect, Route, useHistory } from 'react-router-dom';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  const { user } = useContext(AppContext);\r\n\r\n  return (<Route {...rest} render={(props) => (\r\n    user\r\n      ? <Component {...props} />\r\n      : <Redirect to='/login' />\r\n  )} />\r\n  )\r\n}\r\n\r\nexport { ProtectedRoute };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\forgot-password.jsx",["116","117"],"import React, { useState, useContext } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport userService from '../services/user-service';\r\n\r\nconst ForgotPassword = (props) => {\r\n    const [userData, setuserData] = useState({});\r\n    const {history} = props;\r\n    const formSubmit = () => {\r\n        if(!userData.email){ \r\n            window.alert(\"please enter email address\");\r\n            return;\r\n        }\r\n        \r\n        userService.forgotPassword(userData).then(response => {\r\n            if(response.data){\r\n                window.alert(\"Password reset link sent to your email\");\r\n                history.push('/login');\r\n            } else{\r\n                window.alert(\"Please enter correct Email\");\r\n            }\r\n        })\r\n        \r\n    }   \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Forgot Password</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input type=\"text\" name=\"email\" value={userData.email || ''} onChange={event => {setuserData({...userData, email:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Email</label>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row-button\">\r\n                        <Link to=\"/login\">Click here to Sign In</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(ForgotPassword);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\reset-password.jsx",["118","119","120"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { useParams, Link, withRouter } from 'react-router-dom';\r\nimport userService from '../services/user-service';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst ResetPassword = (props) => {\r\n    const { token = '0' } = useParams();\r\n    let initialValue = {\r\n        password: '',\r\n        error: {\r\n            password: '',\r\n            confirmPassword: ''\r\n        }\r\n    }\r\n    const [userData, setUserData] = useState(initialValue);\r\n    const { history } = props;\r\n    const {user, setUser} = useContext(AppContext);\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n          history.push(\"/\")\r\n        }\r\n      },[user]);\r\n\r\n    const validData = async () => {\r\n        let isError = false;\r\n        let error = {\r\n            password: '',\r\n            confirmPassword: ''\r\n        }\r\n        const passwordRegex = RegExp('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[@#$%^&-+=]).{8,20}$');\r\n\r\n        if (userData.password.length < 1) {\r\n            error.password = 'Password is required field';\r\n            isError = true;\r\n        } else if(!userData.password.match(passwordRegex)) {\r\n            error.password = \"Use at least 8 characters, 1 Upper Case and 1 special character\";\r\n            isError = true;\r\n        }\r\n\r\n        if (userData.confirmPassword.length < 1) {\r\n            error.password = 'Confirm Password is required field';\r\n            isError = true;\r\n        } else if(userData.password !== userData.confirmPassword) {\r\n            error.password = \"Password doesnt match\";\r\n            isError = true;\r\n        }\r\n\r\n        await setUserData({ ...userData, error: error })\r\n        return isError;\r\n    }\r\n\r\n    const formSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (await validData()) {\r\n            console.log('error', userData);\r\n            return;\r\n        }\r\n        userService.resetPassword(token,userData.password).then(response => {\r\n            if (response.status === 200) {\r\n                window.alert(\"Password updated successfully\");\r\n                history.push('/login');\r\n            } else {\r\n                window.alert(\"Unable to update password\");\r\n            }\r\n        })\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Reset Password</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input type=\"password\" name=\"email\" value={userData.password || ''} onChange={event => { setUserData({ ...userData, password: event.target.value }) }} placeholder=\" \" required />\r\n                            <label>New Password</label>\r\n                            <div className=\"error\">{userData.error.password}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input type=\"password\" name=\"email\" value={userData.confirmPassword || ''} onChange={event => { setUserData({ ...userData, confirmPassword: event.target.value }) }} placeholder=\" \" required />\r\n                            <label>Confirm Password</label>\r\n                            <div className=\"error\">{userData.error.confirmPassword}</div>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Reset Password</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row-button\">\r\n                        <Link to=\"/login\">Click here to Sign In</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(ResetPassword);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\registration.jsx",["121","122","123","124","125"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport userService from '../services/user-service';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst Registration = (props) => {   \r\n    const {user, setUser} = useContext(AppContext);\r\n    const {history} = props;\r\n    let initialValue = {\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        error: {\r\n            username: '',\r\n            password: '',\r\n            email: '',\r\n            phoneNumber: ''\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n          history.push(\"/\")\r\n        }\r\n      },[user]);\r\n\r\n    const [registrationData, setRegistrationData] = useState(initialValue);\r\n    const validData = async () => {\r\n        let isError = false;\r\n        let error = {\r\n            username: '',\r\n            password: '',\r\n            email: '',\r\n            phoneNumber: ''\r\n        }\r\n        const usernameRegex = '^[A-Z][a-zA-Z]{2,}([ ][A-Z]([a-z]{1,})*)*$';\r\n        const phoneNumberRegex = RegExp('^([\\+]?[0-9]{2})?[-\\.]?[ ]?[0-9]{10}$');\r\n        const emailRegex = RegExp('^([a-zA-Z0-9]+[+_.-]?[a-zA-Z0-9]+)+@[a-zA-Z0-9-]+.[a-z]{2,3}.[a-z]{2,3}$');\r\n        const passwordRegex = RegExp('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[@#$%^&-+=]).{8,20}$');\r\n\r\n        if (registrationData.username.length < 1) {\r\n            error.username = 'Username is required field';\r\n            isError = true;\r\n        } else if(!registrationData.username.match(usernameRegex)) {\r\n            error.username = \"First letter should be in upper case\";\r\n            isError = true;\r\n        }\r\n\r\n        if (registrationData.password.length < 1) {\r\n            error.password = 'Password is required field';\r\n            isError = true;\r\n        } else if(!registrationData.password.match(passwordRegex)) {\r\n            error.password = \"Use at least 8 characters, 1 Upper Case and 1 special character\";\r\n            isError = true;\r\n        }\r\n\r\n        if(registrationData.email.length < 1) {\r\n            error.email = 'Email is required field';\r\n            isError = true;\r\n        } else if(!registrationData.email.match(emailRegex)) {\r\n            error.email = \"Please enter valid email\";\r\n            isError = true;\r\n        }\r\n        if (registrationData.phoneNumber.length < 1) {\r\n            error.phoneNumber = 'Phone Number is required field';\r\n            isError = true;\r\n        } else if (!registrationData.phoneNumber.match(phoneNumberRegex)) {\r\n            error.phoneNumber = \"Please enter valid Phone Number\";\r\n            isError = true;\r\n        }\r\n        await setRegistrationData({ ...registrationData, error: error })\r\n        return isError;\r\n    }\r\n\r\n    const formSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (await validData()) {\r\n            console.log('error', registrationData);\r\n            return;\r\n        }\r\n\r\n        userService.registration(registrationData).then(response => {\r\n            if(response.data.data){\r\n                window.alert(\"Registration Successful!\");\r\n                history.push('/login');\r\n            } else{\r\n                window.alert(response.data.message);\r\n            }\r\n        })  \r\n    }       \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Sign Up</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input type=\"text\" name=\"username\" value={registrationData.username} onChange={event => {setRegistrationData({...registrationData, username:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>User Name</label>\r\n                            <div className=\"error\">{registrationData.error.username}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input type=\"password\" name=\"password\" value={registrationData.password} onChange={event => {setRegistrationData({...registrationData, password:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Password</label>\r\n                            <div className=\"error\">{registrationData.error.password}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input type=\"email\" name=\"email\" value={registrationData.email} onChange={event => {setRegistrationData({...registrationData, email:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Email</label>\r\n                            <div className=\"error\">{registrationData.error.email}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input type=\"tel\" name=\"phoneNumber\" value={registrationData.phoneNumber} onChange={event => {setRegistrationData({...registrationData, phoneNumber:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Phone Number</label>  \r\n                            <div className=\"error\">{registrationData.error.phoneNumber}</div>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Register</button>\r\n                        </div>\r\n                        <div className=\"row-button\">\r\n                            <Link to=\"/login\">Click here to Login</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Registration);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\login.jsx",["126","127","128"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { useParams, Link, withRouter } from 'react-router-dom';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport userService from '../services/user-service';\r\nimport axiosService from '../services/axios-service';\r\n\r\nconst Login = (props) => {\r\n    const {user, setUser} = useContext(AppContext);\r\n    const [loginData, setLoginData] = useState({});\r\n    const {history} = props;\r\n\r\n    useEffect(()=>{\r\n      if(user){\r\n        history.push(\"/\")\r\n      }\r\n    },[user]);\r\n\r\n    const formSubmit = () => {\r\n\r\n        if(!loginData.email){ \r\n            window.alert(\"please enter email address\");\r\n            return;\r\n        }\r\n        if(!loginData.password){ \r\n            window.alert(\"please enter password\");\r\n            return;\r\n        }\r\n        \r\n        userService.login(loginData).then(response => {\r\n            if(response.data.data){\r\n                setUser(response.data.data);\r\n                axiosService.setToken(response.data.data)\r\n                history.push('/');\r\n            } else{\r\n                window.alert(\"Please enter correct username and password\");\r\n            }\r\n        })\r\n        \r\n    }   \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Sign In</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input type=\"text\" name=\"email\" value={loginData.email || ''} onChange={event => {setLoginData({...loginData, email:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Email</label>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input type=\"password\" name=\"password\" value={loginData.password || ''} onChange={event => {setLoginData({...loginData, password:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Password</label>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Login</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row-button\">\r\n                        <Link to=\"/signup\">Click here to Sign Up</Link>\r\n                    </div>\r\n                    <div className=\"row-button mt-5\">\r\n                        <Link to=\"/forgot-password\">Forgot Password?</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Login);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\menu.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\AddNote.jsx",["129","130","131","132","133","134","135"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Card, InputBase, Button, createMuiTheme, MuiThemeProvider } from '@material-ui/core/';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport unpin from '../assets/icons/pin.svg';\r\nimport pin from '../assets/icons/unpin.svg';\r\nimport unarchive from '../assets/icons/unarchive.svg';\r\nimport archive from '../assets/icons/archive.svg';\r\nimport trash from '../assets/icons/trash.svg';\r\nimport more from '../assets/icons/more.svg';\r\nimport noteService from '../services/note-service'\r\nimport \"./style.scss\";\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiChip: {\r\n            label: {\r\n                fontSize: '0.81 rem'\r\n            },\r\n            root: {\r\n                height: 26\r\n            }\r\n        }\r\n    }, typography: {\r\n        useNextVariants: true,\r\n    },\r\n});\r\n\r\n\r\nexport default class AddNote extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: false,\r\n            noteId: '',\r\n            title: '',\r\n            description: '',\r\n            pin: 0,\r\n            archive: 0,\r\n            trash: 0,\r\n        };\r\n        this.handleTakeNote = this.handleTakeNote.bind(this);\r\n    }\r\n\r\n    handleNewNote = (message) => {\r\n        var Note = {\r\n            noteId: '',\r\n            title: this.state.title,\r\n            description: this.state.description,\r\n            pin: this.state.pin,\r\n            color: this.state.color,\r\n            archive: this.state.archive,\r\n            trash: this.state.trash\r\n        }\r\n        if ((Note.title !== '' || Note.description !== '')) {\r\n            Note = this.sendNote(Note);\r\n            this.setState({\r\n                active: !this.state.active,\r\n                noteId: '',\r\n                title: '',\r\n                description: '',\r\n                pin: 0,\r\n                archive: 0,\r\n                trash: 0\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                active: !this.state.active,\r\n                pin: 0,\r\n                archive: 0,\r\n                trash: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    sendNote = (note) => {\r\n        noteService.createNote(note).then(response => {\r\n            if (response.status === 200) {\r\n                alert(\"note Created\");\r\n                note.noteId = response.data.noteId;\r\n                this.props.getNoteData();\r\n            }\r\n        }).catch();\r\n        return note;\r\n    }\r\n\r\n    handleInput = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    }\r\n\r\n    handleTakeNote = () => {\r\n        this.setState({\r\n            active: !this.state.active,\r\n        });\r\n        this.handleNewNote('Note Created');\r\n    }\r\n\r\n    handleClickAway = () => {\r\n        this.setState({\r\n            active: false,\r\n        },\r\n            this.handleNewNote('Note Created'));\r\n    }\r\n\r\n    handlePin = () => {\r\n        this.setState({\r\n            pin: this.state.pin === 1 ? 0 : 1\r\n\r\n        });\r\n    }\r\n\r\n    handlearchive = () => {\r\n        this.setState({\r\n            archive: 1,\r\n        }, () => {\r\n            this.handleNewNote('Note archive');\r\n            console.log('archive', this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var Open = (<MuiThemeProvider theme={theme}>\r\n            <ClickAwayListener onClickAway={this.handleClickAway} >\r\n                <Card className='takenote-div-open' style={{ backgroundColor: this.state.color }} >\r\n                    <div className='note-top-div'>\r\n                        <InputBase name='title' fullWidth placeholder='Title' onChange={this.handleInput} />\r\n                        <div className='note-icon-pin' role='button' onClick={this.handlePin} >\r\n                            <img src={this.state.pin === 1 ? pin : unpin} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                    <InputBase name='description' multiline fullWidth placeholder='Take a note..' onChange={this.handleInput} />\r\n                    <div className='takenote-bottom-icons-div'>\r\n                        <div className='note-icon-div' role='Button' onClick={this.handlearchive}>\r\n                            <img src={this.state.archive === 1 ? trash : trash} alt=\"\" />\r\n                        </div>\r\n                        <div className='note-icon-div' role='Button' onClick={this.handlearchive}>\r\n                            <img src={this.state.archive === 1 ? unarchive : archive} alt=\"\" />\r\n                        </div>\r\n                        <div className='note-icon-div' role='Button'>\r\n                            <img src={more} alt=\"\" />\r\n                        </div>\r\n                        <Button className='card-button-close' component=\"span\" onClick={this.handleTakeNote}>\r\n                            Close\r\n                        </Button>\r\n                    </div>\r\n\r\n\r\n                </Card>\r\n            </ClickAwayListener>\r\n        </MuiThemeProvider>\r\n        );\r\n\r\n        var Close = (<div className='takenote-div' onClick={this.handleTakeNote} >\r\n            <InputBase fullWidth placeholder='Take a note..' />\r\n        </div>);\r\n\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                <div>\r\n                    {this.state.active ? (Open) : (Close)}\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n\r\n\r\n}","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\note-service.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\components\\NoteComponent.jsx",["136"],"import React, { useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardHeader, CardContent, CardActions, Tooltip, makeStyles, Dialog, DialogContentText, DialogActions, Button, DialogTitle, InputBase } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArchiveOutlinedIcon from '@material-ui/icons/ArchiveOutlined';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\nimport Unpin from '../assets/icons/pin.svg';\r\nimport Pin from '../assets/icons/unpin.svg';\r\nimport noteService from '../services/note-service';\r\nimport RestoreFromTrashIcon from '@material-ui/icons/RestoreFromTrash';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardIcons: {\r\n        zoom: 0.8\r\n    },\r\n    paper: { minWidth: \"500px\" },\r\n    dialogTitle: {\r\n        display: 'flex',\r\n        flexDirection: \"row\"\r\n    },\r\n    actionContainer: {\r\n        width: \"90%\"\r\n    }\r\n})\r\n)\r\n\r\nconst NoteComponent = props => {\r\n    const classes = useStyles();\r\n    const { noteId, title, description, pin, trash, archive, getNoteData } = props;\r\n    const [actionsVisibility, setActionsVisibility] = useState(false);\r\n    const [editDialog, setEditDialog] = useState({\r\n        visible: false,\r\n        noteId: '',\r\n        title: '',\r\n        description: '',\r\n        pin: 0,\r\n        archive: 0,\r\n        trash: 0,\r\n    });\r\n\r\n    const pinNote = () => {\r\n        noteService.pinNote(noteId).then(() => {\r\n            getNoteData();\r\n        })\r\n    }\r\n\r\n    const archiveNote = () => {\r\n        noteService.archiveNote(noteId).then(() => {\r\n            getNoteData();\r\n        })\r\n    }\r\n\r\n    const trashNote = () => {\r\n        noteService.trashNote(noteId).then(() => {\r\n            getNoteData();\r\n        })\r\n    }\r\n\r\n    const deleteForEver = () => {\r\n        noteService.deleteForEver(noteId).then(() => {\r\n            getNoteData();\r\n        })\r\n    }\r\n\r\n    const handleSave = () => {\r\n        noteService.updateNote(editDialog).then(response => {\r\n            if (response.status === 200) {\r\n                //alert(\"note Updated\");\r\n                getNoteData();\r\n            }\r\n            setEditDialog({ ...editDialog, visible: false });\r\n        }).catch();\r\n    }\r\n\r\n    const updateFields = newValues => {\r\n        setEditDialog(prev => {\r\n            const newContent = { ...prev, ...newValues };\r\n            return newContent;\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                onMouseEnter={() => setActionsVisibility(true)}\r\n                onMouseLeave={() => setActionsVisibility(false)}>\r\n                <CardHeader\r\n                    title={title}\r\n                    action={\r\n                        <IconButton aria-label=\"settings\" onClick={pinNote}>\r\n                            <img src={pin ? Pin : Unpin} alt=\"pin\" />\r\n                        </IconButton>\r\n                    }\r\n                    onClick={() => setEditDialog({ ...editDialog, noteId, title, description, pin, trash, archive, visible: true })}\r\n                />\r\n                <CardContent onClick={() => setEditDialog({ ...editDialog, noteId, title, description, pin, trash, archive, visible: true })}>\r\n                    {description}\r\n                </CardContent>\r\n                <CardActions>\r\n                    {trash ?\r\n                        <>\r\n                            <Tooltip title={\"Delete forever\"}>\r\n                                <IconButton onClick={deleteForEver}>\r\n                                    <DeleteForeverIcon className={classes.cardIcons} style={{ visibility: actionsVisibility ? 'visible' : 'hidden' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title={\"Restore\"}>\r\n                                <IconButton onClick={trashNote}>\r\n                                    <RestoreFromTrashIcon className={classes.cardIcons} style={{ visibility: actionsVisibility ? 'visible' : 'hidden' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        </>\r\n                        : <>\r\n                            <Tooltip title={archive ? \"Unarchive\" : \"Archive\"}>\r\n                                <IconButton onClick={archiveNote}>\r\n                                    <ArchiveOutlinedIcon className={classes.cardIcons} style={{ visibility: actionsVisibility ? 'visible' : 'hidden' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title={\"Delete\"}>\r\n                                <IconButton onClick={trashNote}>\r\n                                    <DeleteOutlinedIcon className={classes.cardIcons} style={{ visibility: actionsVisibility ? 'visible' : 'hidden' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Label\">\r\n                                <IconButton>\r\n                                    <LabelOutlinedIcon className={classes.cardIcons} style={{ visibility: actionsVisibility ? 'visible' : 'hidden' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </>}\r\n                </CardActions>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={editDialog.visible}\r\n                onClose={handleSave}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                classes={{ paper: classes.paper }}\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    <div className={classes.dialogTitle}>\r\n                        <InputBase value={editDialog.title} fullWidth placeholder='Title' onChange={event => updateFields({ title: event.target.value })} />\r\n                        <div className='note-icon-pin' role='button' onClick={() => updateFields({ pin: editDialog.pin === 1 ? 0 : 1 })} >\r\n                            <img src={editDialog.pin === 1 ? Pin : Unpin} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <InputBase value={editDialog.description} multiline fullWidth placeholder='Take a note..' onChange={event => updateFields({ description: event.target.value })} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {trash ?\r\n                        <div className={classes.actionContainer}>\r\n                            <Tooltip title={\"Delete forever\"}>\r\n                                <IconButton onClick={deleteForEver}>\r\n                                    <DeleteForeverIcon className={classes.cardIcons} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title={\"Restore\"}>\r\n                                <IconButton onClick={trashNote}>\r\n                                    <RestoreFromTrashIcon className={classes.cardIcons} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        </div>\r\n                        : <div className={classes.actionContainer}>\r\n                            <Tooltip title={archive ? \"Unarchive\" : \"Archive\"}>\r\n                                <IconButton onClick={archiveNote}>\r\n                                    <ArchiveOutlinedIcon className={classes.cardIcons} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title={\"Delete\"}>\r\n                                <IconButton onClick={trashNote}>\r\n                                    <DeleteOutlinedIcon className={classes.cardIcons} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Label\">\r\n                                <IconButton>\r\n                                    <LabelOutlinedIcon className={classes.cardIcons} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>}\r\n                    <Button onClick={handleSave} color=\"primary\" autoFocus>\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport { NoteComponent };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Note.jsx",["137"],"import React, { Component, useContext, useEffect, useState } from 'react';\r\nimport AddNote from './AddNote';\r\nimport { NoteComponent } from '../components/NoteComponent';\r\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport noteService from '../services/note-service';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport { ViewTypes } from '../utils/constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    sectionTitle: {\r\n        fontSize: 10,\r\n        margin: 20,\r\n        marginTop: 40\r\n    }\r\n})\r\n)\r\n\r\nconst Note = () => {\r\n    const classes = useStyles();\r\n    const { user, viewType } = useContext(AppContext);\r\n    const [notes, setNotes] = useState([]);\r\n\r\n    const getNoteData = () => {\r\n        noteService.getNote().then(data => {\r\n            setNotes(data.data);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNoteData();\r\n    }, [user])\r\n\r\n    const gridXS = viewType === ViewTypes.List ? 12 : 6;\r\n    const gridMD = viewType === ViewTypes.List ? 12 : 3;\r\n\r\n\r\n    const hasPinnedItems = notes.some(item => item.pin);\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <AddNote getNoteData={getNoteData} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {hasPinnedItems &&\r\n                    <div>\r\n                        <Typography className={classes.sectionTitle}>PINNED</Typography>\r\n                        <Grid container spacing={3}>\r\n                            {notes.filter(item => item.pin && !item.trash && !item.archive).map(note =>\r\n                                <Grid item xs={gridXS} md={gridMD} key={`${note.noteId}`}>\r\n                                    <NoteComponent\r\n                                        noteId={note.noteId}\r\n                                        title={note.title}\r\n                                        description={note.description}\r\n                                        pin={note.pin}\r\n                                        trash={note.trash}\r\n                                        archive={note.archive}\r\n                                        getNoteData={getNoteData}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    </div>\r\n                }\r\n                {hasPinnedItems && <Typography className={classes.sectionTitle}>OTHERS</Typography>}\r\n                <Grid container spacing={3}>\r\n                    {notes.filter(item => !item.pin && !item.trash && !item.archive).map(note =>\r\n                        <Grid item xs={gridXS} md={gridMD} key={`${note.noteId}`}>\r\n                            <NoteComponent\r\n                                noteId={note.noteId}\r\n                                title={note.title}\r\n                                description={note.description}\r\n                                pin={note.pin}\r\n                                trash={note.trash}\r\n                                archive={note.archive}\r\n                                getNoteData={getNoteData}\r\n                            />\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport { Note };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Archived.jsx",["138"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport { NoteComponent } from '../components/NoteComponent';\r\nimport noteService from '../services/note-service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n})\r\n)\r\n\r\nconst Archived = props => {\r\n    const classes = useStyles();\r\n    const { user } = useContext(AppContext);\r\n    const [notes, setNotes] = useState([]);\r\n\r\n    const getNoteData = () => {\r\n        noteService.getNote().then(data => {\r\n            setNotes(data.data);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNoteData();\r\n    }, [user])\r\n\r\n    return <Grid container spacing={3}>\r\n        {notes.filter(item => item.archive).map(note =>\r\n            <Grid item xs={6} md={3} key={`${note.noteId}`}>\r\n                <NoteComponent\r\n                    noteId={note.noteId}\r\n                    title={note.title}\r\n                    description={note.description}\r\n                    pin={note.pin}\r\n                    trash={note.trash}\r\n                    archive={note.archive}\r\n                    getNoteData={getNoteData}\r\n                />\r\n            </Grid>\r\n        )}\r\n    </Grid>;\r\n}\r\n\r\nexport { Archived };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Trash.jsx",["139"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport { NoteComponent } from '../components/NoteComponent';\r\nimport noteService from '../services/note-service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n})\r\n)\r\n\r\nconst Trash = props => {\r\n    const classes = useStyles();\r\n    const { user } = useContext(AppContext);\r\n    const [notes, setNotes] = useState([]);\r\n\r\n    const getNoteData = () => {\r\n        noteService.getNote().then(data => {\r\n            setNotes(data.data);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNoteData();\r\n    }, [user])\r\n\r\n    return <Grid container spacing={3}>\r\n        {notes.filter(item => item.trash).map(note =>\r\n            <Grid item xs={6} md={3} key={`${note.noteId}`}>\r\n                <NoteComponent\r\n                    noteId={note.noteId}\r\n                    title={note.title}\r\n                    description={note.description}\r\n                    pin={note.pin}\r\n                    trash={note.trash}\r\n                    archive={note.archive}\r\n                    getNoteData={getNoteData}\r\n                />\r\n            </Grid>\r\n        )}\r\n    </Grid>;\r\n}\r\n\r\nexport { Trash };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\constants.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":1,"column":29,"nodeType":"148","messageId":"149","endLine":1,"endColumn":38},{"ruleId":"146","severity":1,"message":"150","line":2,"column":27,"nodeType":"148","messageId":"149","endLine":2,"endColumn":37},{"ruleId":"146","severity":1,"message":"151","line":1,"column":27,"nodeType":"148","messageId":"149","endLine":1,"endColumn":37},{"ruleId":"152","severity":1,"message":"153","line":30,"column":21,"nodeType":"154","endLine":30,"endColumn":55},{"ruleId":"146","severity":1,"message":"155","line":19,"column":18,"nodeType":"148","messageId":"149","endLine":19,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":25,"column":9,"nodeType":"158","endLine":25,"endColumn":15,"suggestions":"159"},{"ruleId":"152","severity":1,"message":"153","line":76,"column":21,"nodeType":"154","endLine":76,"endColumn":56},{"ruleId":"146","severity":1,"message":"155","line":9,"column":18,"nodeType":"148","messageId":"149","endLine":9,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":28,"column":9,"nodeType":"158","endLine":28,"endColumn":15,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":40,"column":45,"nodeType":"163","messageId":"164","endLine":40,"endColumn":46,"suggestions":"165"},{"ruleId":"161","severity":1,"message":"166","line":40,"column":61,"nodeType":"163","messageId":"164","endLine":40,"endColumn":62,"suggestions":"167"},{"ruleId":"152","severity":1,"message":"153","line":99,"column":21,"nodeType":"154","endLine":99,"endColumn":55},{"ruleId":"146","severity":1,"message":"168","line":4,"column":10,"nodeType":"148","messageId":"149","endLine":4,"endColumn":19},{"ruleId":"156","severity":1,"message":"157","line":18,"column":7,"nodeType":"158","endLine":18,"endColumn":13,"suggestions":"169"},{"ruleId":"152","severity":1,"message":"153","line":46,"column":21,"nodeType":"154","endLine":46,"endColumn":55},{"ruleId":"146","severity":1,"message":"170","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":25},{"ruleId":"146","severity":1,"message":"151","line":1,"column":27,"nodeType":"148","messageId":"149","endLine":1,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":1,"column":39,"nodeType":"148","messageId":"149","endLine":1,"endColumn":48},{"ruleId":"146","severity":1,"message":"171","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":12},{"ruleId":"172","severity":1,"message":"173","line":135,"column":56,"nodeType":"174","endLine":135,"endColumn":69},{"ruleId":"172","severity":1,"message":"173","line":138,"column":56,"nodeType":"174","endLine":138,"endColumn":69},{"ruleId":"172","severity":1,"message":"173","line":141,"column":56,"nodeType":"174","endLine":141,"endColumn":69},{"ruleId":"146","severity":1,"message":"175","line":3,"column":77,"nodeType":"148","messageId":"149","endLine":3,"endColumn":94},{"ruleId":"146","severity":1,"message":"176","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":26},{"ruleId":"146","severity":1,"message":"177","line":13,"column":11,"nodeType":"148","messageId":"149","endLine":13,"endColumn":18},{"ruleId":"146","severity":1,"message":"177","line":13,"column":11,"nodeType":"148","messageId":"149","endLine":13,"endColumn":18},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],["178"],["179"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'useContext' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["180"],["181"],"no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["182","183"],"Unnecessary escape character: \\..",["184","185"],"'useParams' is defined but never used.",["186"],"'useState' is defined but never used.","'Chip' is defined but never used.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'DialogContentText' is defined but never used.","'Component' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"187","fix":"189"},{"messageId":"190","fix":"191","desc":"192"},{"messageId":"193","fix":"194","desc":"195"},{"messageId":"190","fix":"196","desc":"192"},{"messageId":"193","fix":"197","desc":"195"},{"desc":"187","fix":"198"},"Update the dependencies array to be: [history, user]",{"range":"199","text":"200"},{"range":"201","text":"200"},"removeEscape",{"range":"202","text":"203"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"204","text":"205"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"206","text":"203"},{"range":"207","text":"205"},{"range":"208","text":"200"},[766,772],"[history, user]",[768,774],[1186,1187],"",[1186,1186],"\\",[1202,1203],[1202,1202],[608,614]]