[{"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\index.js":"1","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\reportWebVitals.js":"2","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\user-service.js":"3","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\axios-service.js":"4","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\config\\config.js":"5","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\index.jsx":"6","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\ThemeWrapper.jsx":"7","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\NotFound.jsx":"8","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\index.jsx":"9","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ContextWrapper.jsx":"10","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\AppContext.js":"11","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ProtectedRoute.jsx":"12","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\forgot-password.jsx":"13","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\reset-password.jsx":"14","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\registration.jsx":"15","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\login.jsx":"16","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\menu.js":"17","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\AddNote.jsx":"18","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\note-service.js":"19","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\components\\NoteComponent.jsx":"20","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Note.jsx":"21","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Archived.jsx":"22","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Trash.jsx":"23","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\constants.js":"24","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\components\\EditLabels.jsx":"25","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\label-service.jsx":"26","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\LabelList.jsx":"27"},{"size":150,"mtime":1610606564306,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":797,"mtime":1611108132388,"results":"31","hashOfConfig":"29"},{"size":1483,"mtime":1610798231993,"results":"32","hashOfConfig":"29"},{"size":60,"mtime":1609809958430,"results":"33","hashOfConfig":"29"},{"size":1424,"mtime":1610794816675,"results":"34","hashOfConfig":"29"},{"size":9063,"mtime":1611198557671,"results":"35","hashOfConfig":"29"},{"size":698,"mtime":1610616700766,"results":"36","hashOfConfig":"29"},{"size":793,"mtime":1611173046371,"results":"37","hashOfConfig":"29"},{"size":2249,"mtime":1610934404954,"results":"38","hashOfConfig":"29"},{"size":80,"mtime":1610607496005,"results":"39","hashOfConfig":"29"},{"size":456,"mtime":1610617872754,"results":"40","hashOfConfig":"29"},{"size":2378,"mtime":1610943618009,"results":"41","hashOfConfig":"29"},{"size":4351,"mtime":1610946239965,"results":"42","hashOfConfig":"29"},{"size":6352,"mtime":1610943741177,"results":"43","hashOfConfig":"29"},{"size":3279,"mtime":1610942900886,"results":"44","hashOfConfig":"29"},{"size":897,"mtime":1611164131330,"results":"45","hashOfConfig":"29"},{"size":5761,"mtime":1610988539954,"results":"46","hashOfConfig":"29"},{"size":1094,"mtime":1610802203652,"results":"47","hashOfConfig":"29"},{"size":12426,"mtime":1611206366144,"results":"48","hashOfConfig":"29"},{"size":4639,"mtime":1611172273935,"results":"49","hashOfConfig":"29"},{"size":2238,"mtime":1611173375525,"results":"50","hashOfConfig":"29"},{"size":2230,"mtime":1611173392496,"results":"51","hashOfConfig":"29"},{"size":66,"mtime":1610805385322,"results":"52","hashOfConfig":"29"},{"size":7935,"mtime":1611170445682,"results":"53","hashOfConfig":"29"},{"size":1014,"mtime":1611169026974,"results":"54","hashOfConfig":"29"},{"size":2376,"mtime":1611173924137,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"ys41j5",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"58"},"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\index.js",[],["123","124"],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\reportWebVitals.js",[],["125","126"],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\user-service.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\axios-service.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\config\\config.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\index.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\ThemeWrapper.jsx",["127","128"],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\app\\NotFound.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\index.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ContextWrapper.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\AppContext.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\common\\ProtectedRoute.jsx",["129","130"],"import React, { useContext, useEffect } from 'react';\r\nimport { Redirect, Route, useHistory } from 'react-router-dom';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  const { user } = useContext(AppContext);\r\n\r\n  return (<Route {...rest} render={(props) => (\r\n    user\r\n      ? <Component {...props} />\r\n      : <Redirect to='/login' />\r\n  )} />\r\n  )\r\n}\r\n\r\nexport { ProtectedRoute };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\forgot-password.jsx",["131"],"import React, { useState, useContext } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport userService from '../services/user-service';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst ForgotPassword = (props) => {\r\n    const [userData, setuserData] = useState({});\r\n    const {handleClick} = useContext(AppContext);\r\n    const {history} = props;\r\n    const formSubmit = () => {\r\n        if(!userData.email){ \r\n            window.alert(\"please enter email address\");\r\n            return;\r\n        }\r\n        \r\n        userService.forgotPassword(userData).then(response => {\r\n            if(response.data){\r\n                window.alert(\"Password reset link sent to your email\");\r\n                history.push('/login');\r\n            } else{\r\n                window.alert(\"Please enter correct Email\");\r\n            }\r\n        }).catch((error) => {\r\n            if (error.response){\r\n              handleClick(error.response.data.data);\r\n            }  \r\n            else\r\n              handleClick(\"Please try again\");\r\n          }) \r\n    }   \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Forgot Password</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"text\" name=\"email\" value={userData.email || ''} onChange={event => {setuserData({...userData, email:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Email</label>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row-button\">\r\n                        <Link to=\"/login\">Click here to Sign In</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(ForgotPassword);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\reset-password.jsx",["132","133"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { useParams, Link, withRouter } from 'react-router-dom';\r\nimport userService from '../services/user-service';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst ResetPassword = (props) => {\r\n    const { token = '0' } = useParams();\r\n    let initialValue = {\r\n        password: '',\r\n        error: {\r\n            password: '',\r\n            confirmPassword: ''\r\n        }\r\n    }\r\n    const [userData, setUserData] = useState(initialValue);\r\n    const { history } = props;\r\n    const {user, handleClick} = useContext(AppContext);\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n          history.push(\"/\")\r\n        }\r\n      },[user]);\r\n\r\n    const validData = async () => {\r\n        let isError = false;\r\n        let error = {\r\n            password: '',\r\n            confirmPassword: ''\r\n        }\r\n        const passwordRegex = RegExp('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[@#$%^&-+=]).{8,20}$');\r\n\r\n        if (userData.password.length < 1) {\r\n            error.password = 'Password is required field';\r\n            isError = true;\r\n        } else if(!userData.password.match(passwordRegex)) {\r\n            error.password = \"Use at least 8 characters, 1 Upper Case and 1 special character\";\r\n            isError = true;\r\n        }\r\n\r\n        if (userData.confirmPassword.length < 1) {\r\n            error.password = 'Confirm Password is required field';\r\n            isError = true;\r\n        } else if(userData.password !== userData.confirmPassword) {\r\n            error.password = \"Password doesnt match\";\r\n            isError = true;\r\n        }\r\n\r\n        await setUserData({ ...userData, error: error })\r\n        return isError;\r\n    }\r\n\r\n    const formSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (await validData()) {\r\n            console.log('error', userData);\r\n            return;\r\n        }\r\n        userService.resetPassword(token,userData.password).then(response => {\r\n            if (response.status === 200) {\r\n                window.alert(\"Password updated successfully\");\r\n                history.push('/login');\r\n            } else {\r\n                window.alert(\"Unable to update password\");\r\n            }\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n              handleClick(error.response.data.data);\r\n            }  \r\n            else\r\n              handleClick(\"Please try again\");\r\n          })\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo} />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Reset Password</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"password\" name=\"email\" value={userData.password || ''} onChange={event => { setUserData({ ...userData, password: event.target.value }) }} placeholder=\" \" required />\r\n                            <label>New Password</label>\r\n                            <div className=\"error\">{userData.error.password}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"password\" name=\"email\" value={userData.confirmPassword || ''} onChange={event => { setUserData({ ...userData, confirmPassword: event.target.value }) }} placeholder=\" \" required />\r\n                            <label>Confirm Password</label>\r\n                            <div className=\"error\">{userData.error.confirmPassword}</div>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Reset Password</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row-button\">\r\n                        <Link to=\"/login\">Click here to Sign In</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(ResetPassword);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\registration.jsx",["134","135","136","137"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport userService from '../services/user-service';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst Registration = (props) => {   \r\n    const {user, handleClick} = useContext(AppContext);\r\n    const {history} = props;\r\n    let initialValue = {\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        error: {\r\n            username: '',\r\n            password: '',\r\n            email: '',\r\n            phoneNumber: ''\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n          history.push(\"/\")\r\n        }\r\n      },[user]);\r\n\r\n    const [registrationData, setRegistrationData] = useState(initialValue);\r\n    const validData = async () => {\r\n        let isError = false;\r\n        let error = {\r\n            username: '',\r\n            password: '',\r\n            email: '',\r\n            phoneNumber: ''\r\n        }\r\n        const usernameRegex = '^[A-Z][a-zA-Z]{2,}([ ][A-Z]([a-z]{1,})*)*$';\r\n        const phoneNumberRegex = RegExp('^([\\+]?[0-9]{2})?[-\\.]?[ ]?[0-9]{10}$');\r\n        const emailRegex = RegExp('^([a-zA-Z0-9]+[+_.-]?[a-zA-Z0-9]+)+@[a-zA-Z0-9-]+.[a-z]{2,3}.[a-z]{2,3}$');\r\n        const passwordRegex = RegExp('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[@#$%^&-+=]).{8,20}$');\r\n\r\n        if (registrationData.username.length < 1) {\r\n            error.username = 'Username is required field';\r\n            isError = true;\r\n        } else if(!registrationData.username.match(usernameRegex)) {\r\n            error.username = \"First letter should be in upper case\";\r\n            isError = true;\r\n        }\r\n\r\n        if (registrationData.password.length < 1) {\r\n            error.password = 'Password is required field';\r\n            isError = true;\r\n        } else if(!registrationData.password.match(passwordRegex)) {\r\n            error.password = \"Use at least 8 characters, 1 Upper Case and 1 special character\";\r\n            isError = true;\r\n        }\r\n\r\n        if(registrationData.email.length < 1) {\r\n            error.email = 'Email is required field';\r\n            isError = true;\r\n        } else if(!registrationData.email.match(emailRegex)) {\r\n            error.email = \"Please enter valid email\";\r\n            isError = true;\r\n        }\r\n        if (registrationData.phoneNumber.length < 1) {\r\n            error.phoneNumber = 'Phone Number is required field';\r\n            isError = true;\r\n        } else if (!registrationData.phoneNumber.match(phoneNumberRegex)) {\r\n            error.phoneNumber = \"Please enter valid Phone Number\";\r\n            isError = true;\r\n        }\r\n        await setRegistrationData({ ...registrationData, error: error })\r\n        return isError;\r\n    }\r\n\r\n    const formSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (await validData()) {\r\n            console.log('error', registrationData);\r\n            return;\r\n        }\r\n\r\n        userService.registration(registrationData).then(response => {\r\n            if(response.data.data){\r\n                window.alert(\"Registration Successful!\");\r\n                history.push('/login');\r\n            } else{\r\n                window.alert(response.data.message);\r\n            }\r\n        }).catch((error) => {\r\n            if (error.response){\r\n              handleClick(error.response.data.data);\r\n            }  \r\n            else\r\n              handleClick(\"Please try again\");\r\n          })   \r\n    }       \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Sign Up</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"text\" name=\"username\" value={registrationData.username} onChange={event => {setRegistrationData({...registrationData, username:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>User Name</label>\r\n                            <div className=\"error\">{registrationData.error.username}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"password\" name=\"password\" value={registrationData.password} onChange={event => {setRegistrationData({...registrationData, password:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Password</label>\r\n                            <div className=\"error\">{registrationData.error.password}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"email\" name=\"email\" value={registrationData.email} onChange={event => {setRegistrationData({...registrationData, email:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Email</label>\r\n                            <div className=\"error\">{registrationData.error.email}</div>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"tel\" name=\"phoneNumber\" value={registrationData.phoneNumber} onChange={event => {setRegistrationData({...registrationData, phoneNumber:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Phone Number</label>  \r\n                            <div className=\"error\">{registrationData.error.phoneNumber}</div>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Register</button>\r\n                        </div>\r\n                        <div className=\"row-button\">\r\n                            <Link to=\"/login\">Click here to Login</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Registration);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\login.jsx",["138","139","140"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport logo from '../assets/images/logo.png';\r\nimport './login.scss';\r\nimport { useParams, Link, withRouter } from 'react-router-dom';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport userService from '../services/user-service';\r\nimport axiosService from '../services/axios-service';\r\n\r\nconst Login = (props) => {\r\n    const {user, setUser, handleClick} = useContext(AppContext);\r\n    const [loginData, setLoginData] = useState({});\r\n    const {history} = props;\r\n\r\n    useEffect(()=>{\r\n      if(user){\r\n        history.push(\"/\")\r\n      }\r\n    },[user]);\r\n\r\n    const formSubmit = () => {\r\n\r\n        if(!loginData.email){ \r\n            window.alert(\"please enter email address\");\r\n            return;\r\n        }\r\n        if(!loginData.password){ \r\n            window.alert(\"please enter password\");\r\n            return;\r\n        }\r\n        \r\n        userService.login(loginData).then(response => {\r\n            console.log(\"response\",response);\r\n            if(response.data.data){\r\n                setUser(response.data.data);\r\n                axiosService.setToken(response.data.data)\r\n                history.push('/');\r\n            } else{\r\n                window.alert(\"Please enter correct username and password\");\r\n            }\r\n        }).catch((error) => {\r\n            if (error.response){\r\n              handleClick(error.response.data.data);\r\n            }  \r\n            else\r\n              handleClick(\"Please try again\");\r\n          })  \r\n    }   \r\n    return (\r\n        <>\r\n            <div className=\"navigation-bar\">\r\n                <div className=\"navigation-container\">\r\n                    <img className=\"logo\" src={logo}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-content\">\r\n                <div className=\"form\">\r\n                    <h2>Sign In</h2>\r\n                    <div className=\"formContent\">\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"text\" name=\"email\" value={loginData.email || ''} onChange={event => {setLoginData({...loginData, email:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Email</label>\r\n                        </div>\r\n                        <div className=\"row-content\">\r\n                            <input className=\"input\" type=\"password\" name=\"password\" value={loginData.password || ''} onChange={event => {setLoginData({...loginData, password:event.target.value})}} placeholder=\" \" required/>\r\n                            <label>Password</label>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <button onClick={formSubmit} className=\"button\">Login</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row-button\">\r\n                        <Link to=\"/signup\">Click here to Sign Up</Link>\r\n                    </div>\r\n                    <div className=\"row-button mt-5\">\r\n                        <Link to=\"/forgot-password\">Forgot Password?</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Login);","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\menu.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\AddNote.jsx",["141","142","143"],"import React from 'react';\r\nimport { Card, InputBase, Button, createMuiTheme, MuiThemeProvider } from '@material-ui/core/';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Unpin from '../assets/icons/pin.svg';\r\nimport Pin from '../assets/icons/unpin.svg';\r\nimport Archive from '@material-ui/icons/ArchiveOutlined';\r\nimport Unarchive from '@material-ui/icons/UnarchiveOutlined';\r\nimport Trash from '@material-ui/icons/DeleteOutlined';\r\nimport noteService from '../services/note-service';\r\nimport \"./style.scss\";\r\nimport Label from '@material-ui/icons/LabelOutlined';\r\nimport Restore from '@material-ui/icons/RestoreFromTrash';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiChip: {\r\n            label: {\r\n                fontSize: '0.81 rem'\r\n            },\r\n            root: {\r\n                height: 26\r\n            }\r\n        }\r\n    }, typography: {\r\n        useNextVariants: true,\r\n    },\r\n});\r\n\r\n\r\nexport default class AddNote extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: false,\r\n            noteId: '',\r\n            title: '',\r\n            description: '',\r\n            isPin: 0,\r\n            isArchive: 0,\r\n            isTrash: 0,\r\n        };\r\n        this.handleTakeNote = this.handleTakeNote.bind(this);\r\n    }\r\n\r\n    handleNewNote = (message) => {\r\n        var Note = {\r\n            noteId: '',\r\n            title: this.state.title,\r\n            description: this.state.description,\r\n            isPin: this.state.isPin,\r\n            isArchive: this.state.isArchive,\r\n            isTrash: this.state.isTrash\r\n        }\r\n        if ((Note.title !== '' || Note.description !== '')) {\r\n            Note = this.sendNote(Note);\r\n            this.setState({\r\n                active: !this.state.active,\r\n                noteId: '',\r\n                title: '',\r\n                description: '',\r\n                isPin: 0,\r\n                isArchive: 0,\r\n                isTrash: 0\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                active: !this.state.active,\r\n                isPin: 0,\r\n                isArchive: 0,\r\n                isTrash: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    sendNote = (note) => {\r\n        noteService.createNote(note).then(response => {\r\n            console.log(\"note response\",response);\r\n            if (response.status === 200) {\r\n                note.noteId = response.data.noteId;\r\n                this.props.getNoteData();\r\n            }\r\n        }).catch();\r\n        return note;\r\n    }\r\n\r\n    handleInput = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    }\r\n\r\n    handleTakeNote = () => {\r\n        this.setState({\r\n            active: !this.state.active,\r\n        });\r\n        this.handleNewNote('Note Created');\r\n    }\r\n\r\n    handleClickAway = () => {\r\n        this.setState({\r\n            active: false,\r\n        },\r\n            this.handleNewNote('Note Created'));\r\n    }\r\n\r\n    handlePin = () => {\r\n        this.setState({\r\n            isPin: this.state.isPin === 1 ? 0 : 1\r\n        });\r\n    }\r\n\r\n    handlearchive = () => {\r\n        this.setState({\r\n            isArchive: 1,\r\n        }, () => {\r\n            this.handleNewNote('Note archive');\r\n        });\r\n    }\r\n\r\n    handletrash = () => {\r\n        this.setState({\r\n            isTrash: 1,\r\n        }, () => {\r\n            this.handleNewNote('Note trash');\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var Open = (<MuiThemeProvider theme={theme}>\r\n            <ClickAwayListener onClickAway={this.handleClickAway} >\r\n                <Card className='takenote-div-open' style={{ backgroundColor: this.state.color }} >\r\n                    <div className='note-top-div'>\r\n                        <InputBase name='title' fullWidth placeholder='Title' onChange={this.handleInput} />\r\n                        <div className='note-icon-pin' role='button' onClick={this.handlePin} >\r\n                            <img src={this.state.isPin === 1 ? Pin : Unpin} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                    <InputBase name='description' multiline fullWidth placeholder='Take a note..' onChange={this.handleInput} />\r\n                    <div className='takenote-bottom-icons-div'>\r\n                        <div className=\"take-note-icon-div\">\r\n                            <div className='note-icon-div' role='Button' onClick={this.handletrash}>\r\n                                {this.state.isTrash === 1 ? <Restore/> : <Trash/>}\r\n                            </div>\r\n                            <div className='note-icon-div' role='Button' onClick={this.handlearchive}>\r\n                                {this.state.isArchive === 1 ? <Unarchive/> : <Archive/>}\r\n                            </div>\r\n                            <div className='note-icon-div' role='Button'>\r\n                                <Label/>\r\n                            </div>\r\n                        </div>    \r\n                        <Button className='card-button-close' component=\"span\" onClick={this.handleTakeNote}>\r\n                            Close\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n            </ClickAwayListener>\r\n        </MuiThemeProvider>\r\n        );\r\n\r\n        var Close = (<div className='takenote-div' onClick={this.handleTakeNote} >\r\n            <InputBase fullWidth placeholder='Take a note..' />\r\n        </div>);\r\n\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                <div>\r\n                    {this.state.active ? (Open) : (Close)}\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n\r\n\r\n}","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\note-service.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\components\\NoteComponent.jsx",["144","145","146","147","148","149","150"],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Note.jsx",["151"],"import React, { Component, useContext, useEffect, useState } from 'react';\r\nimport AddNote from './AddNote';\r\nimport { NoteComponent } from '../components/NoteComponent';\r\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport noteService from '../services/note-service';\r\nimport labelService from '../services/label-service';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport { ViewTypes } from '../utils/constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    sectionTitle: {\r\n        fontSize: 10,\r\n        margin: 20,\r\n        marginTop: 40\r\n    }\r\n})\r\n)\r\n\r\nconst Note = () => {\r\n    const classes = useStyles();\r\n    const { user, viewType } = useContext(AppContext);\r\n    const [notes, setNotes] = useState([]);\r\n    const [labelsLookup, setLabelsLookup] = useState([]);\r\n\r\n    const getNoteData = () => {\r\n        noteService.getNote().then(noteResponse => {\r\n            labelService.getLabel().then(labelResponse => {\r\n                let mergedResponse = [];\r\n                noteResponse.data.forEach(n => {\r\n                    let newNoteObject = { ...n, labels: [] };\r\n                    labelResponse.data.forEach(l => {\r\n                        let isNoteInLabel = l.listNotes.some(item => item.noteId === n.noteId)\r\n                        if (isNoteInLabel) {\r\n                            newNoteObject = { ...newNoteObject, labels: [...newNoteObject.labels, l] }\r\n                        }\r\n                    })\r\n                    mergedResponse = [...mergedResponse, newNoteObject];\r\n                })\r\n                setNotes(mergedResponse);\r\n                setLabelsLookup(labelResponse.data);\r\n            })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNoteData();\r\n    }, [user])\r\n\r\n    const gridXS = viewType === ViewTypes.List ? 12 : 6;\r\n    const gridMD = viewType === ViewTypes.List ? 7 : 3;\r\n    const gridJustify = viewType === ViewTypes.List ? 'center' : 'left';\r\n    const gridAlign = viewType === ViewTypes.List ? 'center' : 'left';\r\n\r\n    const hasPinnedItems = notes.some(item => item.pin);\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <AddNote getNoteData={getNoteData} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {hasPinnedItems &&\r\n                    <div>\r\n                        <Typography className={classes.sectionTitle} align={gridAlign}>PINNED</Typography>\r\n                        <Grid container spacing={3} justify={gridJustify}>\r\n                            {notes.filter(item => item.pin && !item.trash && !item.archive).map(note =>\r\n                                <Grid item xs={gridXS} md={gridMD} key={`${note.noteId}`}>\r\n                                    <NoteComponent\r\n                                        noteId={note.noteId}\r\n                                        title={note.title}\r\n                                        description={note.description}\r\n                                        pin={note.pin}\r\n                                        trash={note.trash}\r\n                                        archive={note.archive}\r\n                                        getNoteData={getNoteData}\r\n                                        labelsLookup={labelsLookup}\r\n                                        labels={note.labels}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    </div>\r\n                }\r\n                {hasPinnedItems && <Typography className={classes.sectionTitle} align={gridAlign}>OTHERS</Typography>}\r\n                <Grid container spacing={3} justify={gridJustify}>\r\n                    {notes.filter(item => !item.pin && !item.trash && !item.archive).map(note =>\r\n                        <Grid item xs={gridXS} md={gridMD} key={`${note.noteId}`}>\r\n                            <NoteComponent\r\n                                noteId={note.noteId}\r\n                                title={note.title}\r\n                                description={note.description}\r\n                                pin={note.pin}\r\n                                trash={note.trash}\r\n                                archive={note.archive}\r\n                                getNoteData={getNoteData}\r\n                                labelsLookup={labelsLookup}\r\n                                labels={note.labels}\r\n                            />\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport { Note };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Archived.jsx",["152"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport { NoteComponent } from '../components/NoteComponent';\r\nimport noteService from '../services/note-service';\r\nimport labelService from '../services/label-service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n})\r\n)\r\n\r\nconst Archived = props => {\r\n    const classes = useStyles();\r\n    const { user } = useContext(AppContext);\r\n    const [notes, setNotes] = useState([]);\r\n    const [labelsLookup, setLabelsLookup] = useState([]);\r\n\r\n    const getNoteData = () => {\r\n        noteService.getNote().then(noteResponse => {\r\n            labelService.getLabel().then(labelResponse => {\r\n                let mergedResponse = [];\r\n                noteResponse.data.forEach(n => {\r\n                    let newNoteObject = { ...n, labels: [] };\r\n                    labelResponse.data.forEach(l => {\r\n                        let isNoteInLabel = l.listNotes.some(item => item.noteId === n.noteId)\r\n                        if (isNoteInLabel) {\r\n                            newNoteObject = { ...newNoteObject, labels: [...newNoteObject.labels, l] }\r\n                        }\r\n                    })\r\n                    mergedResponse = [...mergedResponse, newNoteObject];\r\n                })\r\n                setNotes(mergedResponse);\r\n                setLabelsLookup(labelResponse.data);\r\n            })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNoteData();\r\n    }, [user])\r\n\r\n    return <Grid container spacing={3}>\r\n        {notes.filter(item => item.archive).map(note =>\r\n            <Grid item xs={6} md={3} key={`${note.noteId}`}>\r\n                <NoteComponent\r\n                    noteId={note.noteId}\r\n                    title={note.title}\r\n                    description={note.description}\r\n                    pin={note.pin}\r\n                    trash={note.trash}\r\n                    archive={note.archive}\r\n                    getNoteData={getNoteData}\r\n                    labelsLookup={labelsLookup}\r\n                    labels={note.labels}\r\n                />\r\n            </Grid>\r\n        )}\r\n    </Grid>;\r\n}\r\n\r\nexport { Archived };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\Trash.jsx",["153"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport { NoteComponent } from '../components/NoteComponent';\r\nimport noteService from '../services/note-service';\r\nimport labelService from '../services/label-service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n})\r\n)\r\n\r\nconst Trash = props => {\r\n    const classes = useStyles();\r\n    const { user } = useContext(AppContext);\r\n    const [notes, setNotes] = useState([]);\r\n    const [labelsLookup, setLabelsLookup] = useState([]);\r\n\r\n    const getNoteData = () => {\r\n        noteService.getNote().then(noteResponse => {\r\n            labelService.getLabel().then(labelResponse => {\r\n                let mergedResponse = [];\r\n                noteResponse.data.forEach(n => {\r\n                    let newNoteObject = { ...n, labels: [] };\r\n                    labelResponse.data.forEach(l => {\r\n                        let isNoteInLabel = l.listNotes.some(item => item.noteId === n.noteId)\r\n                        if (isNoteInLabel) {\r\n                            newNoteObject = { ...newNoteObject, labels: [...newNoteObject.labels, l] }\r\n                        }\r\n                    })\r\n                    mergedResponse = [...mergedResponse, newNoteObject];\r\n                })\r\n                setNotes(mergedResponse);\r\n                setLabelsLookup(labelResponse.data);\r\n            })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNoteData();\r\n    }, [user])\r\n\r\n    return <Grid container spacing={3}>\r\n        {notes.filter(item => item.trash).map(note =>\r\n            <Grid item xs={6} md={3} key={`${note.noteId}`}>\r\n                <NoteComponent\r\n                    noteId={note.noteId}\r\n                    title={note.title}\r\n                    description={note.description}\r\n                    pin={note.pin}\r\n                    trash={note.trash}\r\n                    archive={note.archive}\r\n                    getNoteData={getNoteData}\r\n                    labelsLookup={labelsLookup}\r\n                    labels={note.labels}\r\n                />\r\n            </Grid>\r\n        )}\r\n    </Grid>;\r\n}\r\n\r\nexport { Trash };","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\utils\\constants.js",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\components\\EditLabels.jsx",["154"],"import React from 'react';\r\nimport { InputBase, ListItem, ClickAwayListener, Dialog, ListItemIcon, ListItemText, DialogContent, DialogActions, Button, Grid, IconButton, TextField } from '@material-ui/core/';\r\nimport labelService from '../services/label-service';\r\nimport LabelIcon from '@material-ui/icons/Label';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CheckOutlinedIcon from '@material-ui/icons/CheckOutlined';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport List from '@material-ui/core/List';\r\n\r\nexport default class EditLabelsDialog extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            createNew: false,\r\n            newLabel: '',\r\n            deleteVisibility: null, //it will contain the id of label\r\n            startEditingLabel: null, //it will contain the id of label\r\n            editLabelValue: \"\"\r\n        }\r\n    }\r\n\r\n    handleCloseEditor = () => {\r\n        this.props.seLabelDialogVisibility(false)\r\n    }\r\n    handleClickEditLabels = () => {\r\n        this.handleCloseEditor();\r\n    }\r\n\r\n    handleInputClick = () => {\r\n        this.setState({\r\n            createNew: true,\r\n        });\r\n    }\r\n\r\n    handleInputClickAway = () => {\r\n        this.setState({\r\n            createNew: false,\r\n        });\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            newLabel: e.target.value,\r\n        });\r\n    }\r\n\r\n    handleNewLabel = () => {\r\n        if (this.state.newLabel !== '') {\r\n            this.props.handleNewLabel(this.state.newLabel);\r\n            this.setState({\r\n                newLabel: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDeleteLabel = label => {\r\n        labelService.deleteLabel(label.labelId).then(() => {\r\n            this.props.updateLabels();\r\n            this.handleCloseEditor();\r\n        })\r\n\r\n    }\r\n\r\n    handleCreateLabel = () => {\r\n        if (this.state.createNew && this.state.newLabel) {\r\n            labelService.createLabel({ labelName: this.state.newLabel }).then(() => {\r\n                this.props.updateLabels();\r\n                this.setState({\r\n                    newLabel: \"\"\r\n                })\r\n                this.handleCloseEditor()\r\n            })\r\n        } else {\r\n            this.handleCloseEditor()\r\n        }\r\n\r\n    }\r\n\r\n    handleEditLabel = label => {\r\n        if (this.state.editLabelValue) {\r\n            labelService.editLabel({ labelName: this.state.editLabelValue }, label.labelId).then(() => {\r\n                this.setState({ startEditingLabel: null });\r\n                this.props.updateLabels();\r\n                // this.handleCloseEditor();\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        // console.log('editlabel', this.state);\r\n\r\n        const { fullScreen } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {/* <div className={this.props.Page === 'Edit Labels' ? 'sidedrawer-list-selected' : 'sidedrawer-list'} onClick={this.handleClickEditLabels} >\r\n                    <ListItem >\r\n                        <ListItemIcon><img src={require('../assets/icons/editlabel.svg')} alt=\"\" /></ListItemIcon>\r\n                        <ListItemText primary='Edit Labels' />\r\n                    </ListItem>\r\n                </div> */}\r\n\r\n                <Dialog\r\n                    fullScreen={fullScreen}\r\n                    open={this.props.open}\r\n                    onClose={this.handleClickEditLabels}\r\n                    aria-labelledby=\"responsive-dialog-title\"\r\n                >\r\n                    <DialogContent>\r\n                        <div className='edit-labels-diag-div'>\r\n                            <div className='edit-labels-diag-heading'>\r\n                                Edit Labels\r\n                            </div>\r\n                            <ClickAwayListener\r\n                                onClickAway={this.handleInputClickAway}\r\n                            >\r\n                                <div className='edit-note-diag-createlabel' >\r\n                                    <InputBase onClick={this.handleInputClick}\r\n                                        className='create-new-label'\r\n                                        fullWidth\r\n                                        value={this.state.newLabel}\r\n                                        placeholder=\"Create new label\"\r\n                                        onChange={this.handleInputChange}\r\n                                    />\r\n                                    <List onMouseLeave={() => this.setState({ deleteVisibility: null })}>\r\n                                        {\r\n                                            this.props.labels.map(item => (\r\n                                                <ListItem key={item.labelId}\r\n                                                    onMouseEnter={() => this.setState({ deleteVisibility: item.labelId })}\r\n                                                >\r\n                                                    <ListItemIcon>\r\n                                                        {this.state.deleteVisibility === item.labelId ?\r\n                                                            <IconButton onClick={() => this.handleDeleteLabel(item)}>\r\n                                                                <DeleteIcon />\r\n                                                            </IconButton>\r\n                                                            :\r\n                                                            <IconButton onClick={() => { }}>\r\n                                                                <LabelIcon />\r\n                                                            </IconButton>}\r\n                                                    </ListItemIcon>\r\n                                                    {this.state.startEditingLabel === item.labelId ?\r\n                                                        <TextField value={this.state.editLabelValue} onChange={event => this.setState({ editLabelValue: event.target.value })} />\r\n                                                        :\r\n                                                        <ListItemText primary={item.labelName} />\r\n                                                    }\r\n                                                    <ListItemIcon slot=\"end\">\r\n                                                        {this.state.startEditingLabel === item.labelId ?\r\n                                                            <IconButton onClick={() => this.handleEditLabel(item)}>\r\n                                                                <CheckOutlinedIcon />\r\n                                                            </IconButton>\r\n                                                            :\r\n                                                            <IconButton onClick={() => this.setState({ startEditingLabel: item.labelId, editLabelValue: item.labelName })}>\r\n                                                                <CreateIcon />\r\n                                                            </IconButton>\r\n                                                        }\r\n                                                    </ListItemIcon>\r\n                                                </ListItem>\r\n                                            ))\r\n                                        }\r\n                                    </List>\r\n                                </div>\r\n                            </ClickAwayListener>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleCreateLabel} color=\"primary\">\r\n                            Done\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\services\\label-service.jsx",[],"G:\\bridgelabz\\program\\final-project\\frontend-application\\src\\pages\\LabelList.jsx",["155"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../utils/AppContext';\r\nimport { NoteComponent } from '../components/NoteComponent';\r\nimport noteService from '../services/note-service';\r\nimport labelService from '../services/label-service';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n})\r\n)\r\n\r\nconst LabelList = props => {\r\n    const classes = useStyles();\r\n    const { user } = useContext(AppContext);\r\n    const [notes, setNotes] = useState([]);\r\n    const [labelsLookup, setLabelsLookup] = useState([]);\r\n    const { labelId = '0' } = useParams();\r\n\r\n    const getNoteData = () => {\r\n        noteService.getNote().then(noteResponse => {\r\n            labelService.getLabel().then(labelResponse => {\r\n                let mergedResponse = [];\r\n                noteResponse.data.forEach(n => {\r\n                    let newNoteObject = { ...n, labels: [] };\r\n                    labelResponse.data.forEach(l => {\r\n                        let isNoteInLabel = l.listNotes.some(item => item.noteId === n.noteId)\r\n                        if (isNoteInLabel) {\r\n                            newNoteObject = { ...newNoteObject, labels: [...newNoteObject.labels, l] }\r\n                        }\r\n                    })\r\n                    mergedResponse = [...mergedResponse, newNoteObject];\r\n                })\r\n                setNotes(mergedResponse);\r\n                setLabelsLookup(labelResponse.data);\r\n            })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNoteData();\r\n    }, [user])\r\n\r\n    return <Grid container spacing={3}>\r\n        {notes.filter(item => item.labels.some(label => `${label.labelId}` === labelId)).map(note =>\r\n            <Grid item xs={6} md={3} key={`${note.noteId}`}>\r\n                <NoteComponent\r\n                    noteId={note.noteId}\r\n                    title={note.title}\r\n                    description={note.description}\r\n                    pin={note.pin}\r\n                    trash={note.trash}\r\n                    archive={note.archive}\r\n                    getNoteData={getNoteData}\r\n                    labelsLookup={labelsLookup}\r\n                    labels={note.labels}\r\n                />\r\n            </Grid>\r\n        )}\r\n    </Grid>;\r\n}\r\n\r\nexport { LabelList };",{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"156","replacedBy":"160"},{"ruleId":"158","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":208,"column":44,"nodeType":"164","endLine":208,"endColumn":123},{"ruleId":"162","severity":1,"message":"163","line":208,"column":126,"nodeType":"164","endLine":208,"endColumn":205},{"ruleId":"165","severity":1,"message":"166","line":1,"column":29,"nodeType":"167","messageId":"168","endLine":1,"endColumn":38},{"ruleId":"165","severity":1,"message":"169","line":2,"column":27,"nodeType":"167","messageId":"168","endLine":2,"endColumn":37},{"ruleId":"162","severity":1,"message":"163","line":37,"column":21,"nodeType":"164","endLine":37,"endColumn":55},{"ruleId":"170","severity":1,"message":"171","line":25,"column":9,"nodeType":"172","endLine":25,"endColumn":15,"suggestions":"173"},{"ruleId":"162","severity":1,"message":"163","line":81,"column":21,"nodeType":"164","endLine":81,"endColumn":56},{"ruleId":"170","severity":1,"message":"171","line":28,"column":9,"nodeType":"172","endLine":28,"endColumn":15,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":40,"column":45,"nodeType":"177","messageId":"178","endLine":40,"endColumn":46,"suggestions":"179"},{"ruleId":"175","severity":1,"message":"180","line":40,"column":61,"nodeType":"177","messageId":"178","endLine":40,"endColumn":62,"suggestions":"181"},{"ruleId":"162","severity":1,"message":"163","line":105,"column":21,"nodeType":"164","endLine":105,"endColumn":55},{"ruleId":"165","severity":1,"message":"182","line":4,"column":10,"nodeType":"167","messageId":"168","endLine":4,"endColumn":19},{"ruleId":"170","severity":1,"message":"171","line":18,"column":7,"nodeType":"172","endLine":18,"endColumn":13,"suggestions":"183"},{"ruleId":"162","severity":1,"message":"163","line":52,"column":21,"nodeType":"164","endLine":52,"endColumn":55},{"ruleId":"184","severity":1,"message":"185","line":142,"column":60,"nodeType":"186","endLine":142,"endColumn":73},{"ruleId":"184","severity":1,"message":"185","line":145,"column":60,"nodeType":"186","endLine":145,"endColumn":73},{"ruleId":"184","severity":1,"message":"185","line":148,"column":60,"nodeType":"186","endLine":148,"endColumn":73},{"ruleId":"165","severity":1,"message":"187","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":20},{"ruleId":"165","severity":1,"message":"188","line":3,"column":77,"nodeType":"167","messageId":"168","endLine":3,"endColumn":94},{"ruleId":"165","severity":1,"message":"189","line":3,"column":155,"nodeType":"167","messageId":"168","endLine":3,"endColumn":160},{"ruleId":"165","severity":1,"message":"190","line":3,"column":162,"nodeType":"167","messageId":"168","endLine":3,"endColumn":170},{"ruleId":"165","severity":1,"message":"191","line":3,"column":172,"nodeType":"167","messageId":"168","endLine":3,"endColumn":178},{"ruleId":"165","severity":1,"message":"192","line":16,"column":8,"nodeType":"167","messageId":"168","endLine":16,"endColumn":15},{"ruleId":"165","severity":1,"message":"193","line":17,"column":8,"nodeType":"167","messageId":"168","endLine":17,"endColumn":24},{"ruleId":"165","severity":1,"message":"194","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":26},{"ruleId":"165","severity":1,"message":"195","line":14,"column":11,"nodeType":"167","messageId":"168","endLine":14,"endColumn":18},{"ruleId":"165","severity":1,"message":"195","line":14,"column":11,"nodeType":"167","messageId":"168","endLine":14,"endColumn":18},{"ruleId":"165","severity":1,"message":"196","line":2,"column":124,"nodeType":"167","messageId":"168","endLine":2,"endColumn":128},{"ruleId":"165","severity":1,"message":"195","line":15,"column":11,"nodeType":"167","messageId":"168","endLine":15,"endColumn":18},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],["197"],["198"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["199"],["200"],"no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["201","202"],"Unnecessary escape character: \\..",["203","204"],"'useParams' is defined but never used.",["205"],"jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'CardHeader' is defined but never used.","'DialogContentText' is defined but never used.","'Paper' is defined but never used.","'MenuList' is defined but never used.","'Popper' is defined but never used.","'Popover' is defined but never used.","'FormControlLabel' is defined but never used.","'Component' is defined but never used.","'classes' is assigned a value but never used.","'Grid' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},{"desc":"206","fix":"208"},{"messageId":"209","fix":"210","desc":"211"},{"messageId":"212","fix":"213","desc":"214"},{"messageId":"209","fix":"215","desc":"211"},{"messageId":"212","fix":"216","desc":"214"},{"desc":"206","fix":"217"},"Update the dependencies array to be: [history, user]",{"range":"218","text":"219"},{"range":"220","text":"219"},"removeEscape",{"range":"221","text":"222"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"223","text":"224"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"225","text":"222"},{"range":"226","text":"224"},{"range":"227","text":"219"},[770,776],"[history, user]",[772,778],[1190,1191],"",[1190,1190],"\\",[1206,1207],[1206,1206],[621,627]]